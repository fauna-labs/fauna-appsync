type User {
  first_name: String!
  last_name: String!
  email: String!
  avatar: String
}

type Query {
  listUsers: [User] @http(
    url: "https://graphql.fauna.com/graphql"
    headers: [
      { key: "Content-Type", value: "application/json" }
      { key: "Authorization", value: "$ctx.request.headers.Authorization" }
    ]
  )
}

type Mutation {
  createUser(
    first_name: String!
    last_name: String!
    email: String!
    avatar: String
  ): User @http(
    url: "https://graphql.fauna.com/"
    headers: [
      { key: "Content-Type", value: "application/json" }
      { key: "Authorization", value: "$ctx.request.headers.Authorization" }
    ]
  )

  updateUser(
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    avatar: String
  ): User @http(
    method: POST
    url: "https://graphql.fauna.com/"
    headers: [
      { key: "Content-Type", value: "application/json" }
      { key: "Authorization", value: "$ctx.request.headers.Authorization" }
    ]
  )
}

type Subscription {
  onUserCreated: User @aws_subscribe(mutations: ["createUser"])
  onUserUpdated(id: ID! email: String!): User @aws_subscribe(mutations: ["updateUser"])
}